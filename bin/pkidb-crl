#!/usr/bin/env bash
# shellcheck source-path=..

pkidb_crl() {
  set -eo pipefail; shopt -s inherit_errexit
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
  PATH=$("$pkgroot/.upkg/.bin/path_prepend" "$pkgroot/.upkg/.bin")
  source "$pkgroot/common.sh"

  DOC="pkidb-crl - Retrieve a CRL and verify it against CAs
Usage:
  pkidb-crl --dest=CRLPATH CRLNAME CAFILE...
"
# docopt parser below, refresh this parser with `docopt.sh pkidb-crl`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { local v='2.0.1'; source \
"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:104};usage=${DOC:53:51}
digest=8e2d5;options=(' --dest 1');node_0(){ value __dest 0;};node_1(){ value \
CRLNAME a;};node_2(){ value CAFILE a true;};node_3(){ repeatable 2;};node_4(){
sequence 0 1 3;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2
printf "%s\n" "${DOC:53:51}" >&2;exit 1;}';local varnames=(__dest CRLNAME \
CAFILE) varname;for varname in "${varnames[@]}"; do unset "var_$varname";done
parse 4 "$@";local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do
unset "$p$varname";done;if declare -p var_CAFILE >/dev/null 2>&1; then eval \
$p'CAFILE=("${var_CAFILE[@]}")';else eval $p'CAFILE=()';fi;eval $p'__dest=${va'\
'r___dest:-};'$p'CRLNAME=${var_CRLNAME:-};';local docopt_i=1;[[ $BASH_VERSION \
=~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for varname in \
"${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh"' pkidb-crl`
  eval "$(docopt "$@")"
  check_all_deps

  # shellcheck disable=2153,2154
  if [[ -e $__dest ]] && ! check_crl "${CAFILE[@]}" <"$__dest"; then
    info 'Current CRL invalid, deleting'
    rm -fv "$__dest" | pipe_warning
  fi

  local url pem chg=0
  # shellcheck disable=2154
  url=$(get_crl_url "$CRLNAME")
  # shellcheck disable=2154
  has_changed "$url" "$__dest" || chg=$?
  if [[ $chg = 0 ]]; then
    pem=$(download "$url") || fatal $? "Unable to fetch the CRL '%s'" "$CRLNAME"
    check_crl "${CAFILE[@]}" <<<"$pem"
    verbose "Saving CRL to '%s'" "$__dest"
    printf -- "%s\n" "$pem" >"$__dest"
    info 'The CRL '%s' has been updated' "$CRLNAME"
    return 0
  elif [[ $chg = 3 ]]; then
    info 'The CRL '%s' is up-to-date' "$CRLNAME"
    return 0
  else
    fatal $chg "Unable to fetch the CRL '%s'" "$CRLNAME"
  fi
}

check_crl() {
  local capaths=("$@") out ret
  debug 'Verifying the CRL using CAs at %s' "$(join_by , "${capaths[@]}")"
  if out=$(openssl crl -verify -CAfile <(cat "${capaths[@]}") -noout 2>&1) && grep -q 'verify OK' <<<"$out"; then
    verbose 'The CRL is valid'
  else
    ret=$?
    error 'Unable to verify CRL signature with CAs at %s. Error was: %s' "$(join_by , "${capaths[@]}")" "$out"
    return $ret
  fi
}

pkidb_crl "$@"
