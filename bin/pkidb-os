#!/usr/bin/env bash
# shellcheck source-path=..

pkidb_os() {
  set -eo pipefail; shopt -s inherit_errexit
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
  PATH=$("$pkgroot/.upkg/.bin/path_prepend" "$pkgroot/.upkg/.bin")
  source "$pkgroot/common.sh"

  DOC="pkidb-os - Exclusively manage OS local CAs (/usr/local/share-ca-certificates)
Usage:
  pkidb-os FINGERPRINT...
"
# docopt parser below, refresh this parser with `docopt.sh pkidb-os`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { source "$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e
trimmed_doc=${DOC:0:110};usage=${DOC:78:32};digest=346da;options=();node_0(){
value FINGERPRINT a true;};node_1(){ repeatable 0;};cat <<<' docopt_exit() {
[[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:78:32}" >&2;exit 1;}'
local varnames=(FINGERPRINT) varname;for varname in "${varnames[@]}"; do unset \
"var_$varname";done;parse 1 "$@";local p=${DOCOPT_PREFIX:-''};for varname in \
"${varnames[@]}"; do unset "$p$varname";done;if declare -p var_FINGERPRINT \
>/dev/null 2>&1; then eval $p'FINGERPRINT=("${var_FINGERPRINT[@]}")';else eval \
$p'FINGERPRINT=()';fi;eval ;local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && \
docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; \
do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh"' pkidb-os`
  eval "$(docopt "$@")"
  check_all_deps
  [[ $EUID = 0 ]] || fatal "You must be root"

  local ret=0 fingerprint cert_path certs_path=/usr/local/share/ca-certificates
  # Remove unspecified CAs
  while read -r -d $'\0' cert_path; do
    if ! fingerprint=$(generate_fingerprint <"$cert_path"); then
      warning "Unable to generate fingerprint for '%s'" "$cert_path"
      fingerprint='<UNKNOWN>'
    fi
    # shellcheck disable=2153
    if [[ ${FINGERPRINT[*]} =~ (^|[[:space:]])$fingerprint($|[[:space:]]) && $cert_path = "${certs_path}/${fingerprint}.crt" ]]; then
      verbose "Found specified CA with fingerprint '%s'" "$fingerprint"
    else
      info "Found unspecified or misnamed CA with fingerprint '%s'. Removing." "$fingerprint"
      rm -fv "$cert_path" | pipe_warning
    fi
  done < <(find "$certs_path" -type f -print0)
  # Update specified CAs
  for fingerprint in "${FINGERPRINT[@]}"; do
    "$pkgroot/bin/pkidb-ca" --dest "${certs_path}/${fingerprint}.crt" "$fingerprint" || ret=$?
  done
  /usr/sbin/update-ca-certificates 2>&1 | LOGPROGRAM=update-ca-certificates pipe_verbose

  info "The OS CA certificates have been updated"
  return $ret
}

pkidb_os "$@"
