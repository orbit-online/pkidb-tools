#!/usr/bin/env bash
# shellcheck source-path=..

main() {
  set -eo pipefail; shopt -s inherit_errexit
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
  source "$pkgroot/common.sh"

  DOC="sign-dev-tls-cert - Retrieve a TLS cert for .local domains
Usage:
  sign-dev-tls-cert [-f -C DIR --san FQDN...] FQDN

Options:
  --san FQDN          Additional domains to add to the certificate
  -C --dir DIR        Directory to switch to before signing/renewing
  -f --force-renewal  Renew the certificate regardless of expiration time

Notes:
  The certificate bundle and key will be output to ./bundle.pem and ./key.pem
"
# docopt parser below, refresh this parser with `docopt.sh sign-dev-tls-cert`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { local v='2.0.1'; source \
"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:422};usage=${DOC:59:57}
digest=77f05;options=('-f --force-renewal 0' '-C --dir 1' ' --san 1');node_0(){
switch __force_renewal 0;};node_1(){ value __dir 1;};node_2(){ value __san 2 \
true;};node_3(){ value FQDN a;};node_4(){ optional 0 1 5;};node_5(){
repeatable 2;};node_6(){ sequence 4 3;};cat <<<' docopt_exit() { [[ -n $1 ]] \
&& printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:59:57}" >&2;exit 1;}';local \
varnames=(__force_renewal __dir __san FQDN) varname;for varname in \
"${varnames[@]}"; do unset "var_$varname";done;parse 6 "$@";local \
p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset "$p$varname"
done;if declare -p var___san >/dev/null 2>&1; then eval $p'__san=("${var___san'\
'[@]}")';else eval $p'__san=()';fi;eval $p'__force_renewal=${var___force_renew'\
'al:-false};'$p'__dir=${var___dir:-};'$p'FQDN=${var_FQDN:-};';local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do
for varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh"' sign-dev-tls-cert`
  eval "$(docopt "$@")"
  (
    [[ $FQDN = *.local ]] || fatal "The FQDN '%s' must be a .local domain" "$FQDN"
    contains_element "$FQDN" "${__san[@]}" || __san=("$FQDN" "${__san[@]}")
    [[ -z $__dir ]] || cd "$__dir"
    local domains_changed=false
    # shellcheck disable=2154
    if ! $__force_renewal && [[ -e bundle.pem ]]; then
      local requested_domains=("$FQDN" "${__san[@]}") cert cert_domains=()
      cert=$(sed '/END CERTIFICATE/q' bundle.pem)
      readarray -t cert_domains <<<"$(get_sans <<<"$cert")"
      cert_domains+=("$(get_subject_field '2.5.4.3' 'commonName' <<<"$cert")")
      if ! cmp --silent <(sort <(join_by $'\n' "${cert_domains[@]}")) <(sort <(join_by $'\n' "${requested_domains[@]}")); then
        domains_changed=true
      fi
    fi
    # shellcheck disable=2154
    if [[ ! -e key.pem || ! -e bundle.pem ]] || $domains_changed || $__force_renewal || \
      STEP_SKIP_P11_KIT=true pkidb-step certificate needs-renewal --expires-in=100% bundle.pem 2>&1 | LOGPROGRAM=step pipe_info; then
      # Certificate does not exist or has expired, we must authenticate with a YubiKey
      export STEP_PIN_DESC="${FQDN} must be issued/renewed. To do that \`step\` needs to authenticate to step-ca with your YubiKey #%s"
      local domain san_opts=()
      for domain in "${__san[@]}"; do
        [[ $domain = *.local ]] || fatal "The SAN '%s' must be a .local domain" "$domain"
        san_opts+=(--san "$domain")
      done
      pkidb-step ca certificate "${san_opts[@]}" --force "$FQDN" bundle.pem key.pem
    elif STEP_SKIP_P11_KIT=true pkidb-step certificate needs-renewal --expires-in=50% bundle.pem 2>&1 | LOGPROGRAM=step pipe_info; then
      # Certificate is still valid. Renew without having to ask for YubiKey access.
      STEP_SKIP_P11_KIT=true pkidb-step ca renew --force bundle.pem key.pem 2>&1 | LOGPROGRAM=step pipe_info
    fi
  )
}

main "$@"
