#!/usr/bin/env bash
# shellcheck source-path=..

pkidb_client_krl() {
  set -eo pipefail; shopt -s inherit_errexit
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
  PATH=$("$pkgroot/.upkg/.bin/path_prepend" "$pkgroot/.upkg/.bin")
  source "$pkgroot/common.sh"

  DOC="pkidb-client-krl - Retrieve a CMS signed KRL and verify it against CAs
Usage:
  pkidb-client-krl --dest=KRLPATH KRLNAME CAFILE...
"
# docopt parser below, refresh this parser with `docopt.sh pkidb-client-krl`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { source "$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e
trimmed_doc=${DOC:0:129};usage=${DOC:71:58};digest=67a0d;options=(' --dest 1')
node_0(){ value __dest 0;};node_1(){ value KRLNAME a;};node_2(){ value CAFILE \
a true;};node_3(){ repeatable 2;};node_4(){ sequence 0 1 3;};cat <<<' \
docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:71:58}" >&2;exit 1;}';local varnames=(__dest KRLNAME CAFILE) varname
for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 4 "$@"
local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;if declare -p var_CAFILE >/dev/null 2>&1; then eval $p'CAFIL'\
'E=("${var_CAFILE[@]}")';else eval $p'CAFILE=()';fi;eval $p'__dest=${var___des'\
't:-};'$p'KRLNAME=${var_KRLNAME:-};';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 \
]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for varname in \
"${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh"' pkidb-client-krl`
  eval "$(docopt "$@")"
  check_all_deps

  # The KRL and its signature are in binary, encode in base64 during handling to
  # ensure bash doesn't mess with or fail because of it
  # e.g. "warning: command substitution: ignored null byte in input"

  # shellcheck disable=2154
  local pem_dest=${__dest}.pem
  # shellcheck disable=2153
  if [[ -e $__dest ]] && ! check_krlcms "${CAFILE[@]}" <"$pem_dest"; then
    info 'Current KRL invalid, deleting'
    rm -fv "$__dest" | pipe_warning
  fi

  local url chg=0
  # shellcheck disable=2154
  url=$(get_krl_url "$KRLNAME")
  # shellcheck disable=2154
  has_changed "$url" "$pem_dest" || chg=$?

  local pem krlb64
  if [[ $chg = 0 ]]; then
    pem=$(download "$url") || fatal $? "Unable to fetch the KRL '%s'" "$KRLNAME"
    krlb64=$(check_krlcms "${CAFILE[@]}" <<<"$pem")
    verbose "Saving KRLCMS to '%s'" "$pem_dest"
    printf "%s" "$pem" >"$pem_dest"
    verbose "Saving KRL to '%s'" "$__dest"
    base64 -d <<<"$krlb64" >"$__dest"
    info "The KRL '%s' has been updated" "$KRLNAME"
    return 0
  elif [[ $chg = 3 ]]; then
    info "The KRL '%s' is up-to-date" "$KRLNAME"
    return 0
  else
    fatal $chg "Unable to fetch the KRL" "$KRLNAME"
  fi
}

check_krlcms() {
  local capaths=("$@") out ret
  debug "Verifying the KRL using CAs at '%s'" "$(join_by , "${capaths[@]}")"
  if out=$(openssl cms -verify -inform PEM -CAfile <(cat "${capaths[@]}") -certfile <(cat "${capaths[@]}") -binary | base64); then
    verbose 'The KRL is valid'
    printf "%s" "$out"
  else
    ret=$?
    error "Unable to verify the KRL CMS signature with CAs at '%s'. Error was: %s" "$(join_by , "${capaths[@]}")" "$out"
    return $ret
  fi
}

pkidb_client_krl "$@"
