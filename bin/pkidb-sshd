#!/usr/bin/env bash
# shellcheck source-path=..

pkidb_sshd() {
  set -eo pipefail; shopt -s inherit_errexit
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
  PATH=$("$pkgroot/.upkg/.bin/path_prepend" "$pkgroot/.upkg/.bin")
  source "$pkgroot/common.sh"

  DOC="pkidb-sshd - Manage client CAs for openssh-server and renew its hostkey
Usage:
  pkidb-sshd [options] [-k ALGO...] KRLNAME FINGERPRINT...

Options:
  -f --step-root-fp FP       Fingerprint of the step-ca root certificate
                             [default: \$STEP_ROOT_FP]
  -e --expiry-threshhold TS  Permitted remaining host certificate
                             lifetime before renewal [default: 50%]
  -k --key-algo ALGO         Host cert key algorithms to consider for renewal
                             [default: ecdsa ed25519 rsa]
"
# docopt parser below, refresh this parser with `docopt.sh pkidb-sshd`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { local v='2.0.1'; source \
"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:544};usage=${DOC:72:65}
digest=a830b;options=('-f --step-root-fp 1' '-e --expiry-threshhold 1' '-k --k'\
'ey-algo 1');node_0(){ value __step_root_fp 0;};node_1(){ value \
__expiry_threshhold 1;};node_2(){ value __key_algo 2 true;};node_3(){ value \
KRLNAME a;};node_4(){ value FINGERPRINT a true;};node_5(){ optional 0 1;}
node_6(){ optional 7;};node_7(){ repeatable 2;};node_8(){ repeatable 4;}
node_9(){ sequence 5 6 3 8;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf \
"%s\n" "$1" >&2;printf "%s\n" "${DOC:72:65}" >&2;exit 1;}';local \
varnames=(__step_root_fp __expiry_threshhold __key_algo KRLNAME FINGERPRINT) \
varname;for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 9 \
"$@";local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;if declare -p var___key_algo >/dev/null 2>&1; then eval $p'_'\
'_key_algo=("${var___key_algo[@]}")';else eval $p'__key_algo=(ecdsa ed25519 rs'\
'a)';fi;if declare -p var_FINGERPRINT >/dev/null 2>&1; then eval $p'FINGERPRIN'\
'T=("${var_FINGERPRINT[@]}")';else eval $p'FINGERPRINT=()';fi;eval $p'__step_r'\
'oot_fp=${var___step_root_fp:-'"'"'$STEP_ROOT_FP'"'"'};'$p'__expiry_threshhold'\
'=${var___expiry_threshhold:-50%};'$p'KRLNAME=${var_KRLNAME:-};';local \
docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh"' pkidb-sshd`
  eval "$(docopt "$@")"
  check_all_deps
  [[ $EUID = 0 ]] || fatal "You must be root"

  local ret=0 certs_path=/etc/ssh/client_ca_certs ca_keys_path=/etc/ssh/client_ca_keys \
    capaths=() ssh_pubkey key_lines=() \
    krl_path=/etc/ssh/revoked_client_keys.krl
  [[ -d "$certs_path" ]] || mkdir "$certs_path"
  while read -r -d $'\0' cert_path; do
    if ! fingerprint=$(generate_fingerprint <"$cert_path"); then
      warning "Unable to generate fingerprint for '%s'" "$cert_path"
      fingerprint='<UNKNOWN>'
    fi
    # shellcheck disable=2153
    if [[ ${FINGERPRINT[*]} =~ (^|[[:space:]])$fingerprint($|[[:space:]]) && $cert_path = "${certs_path}/${fingerprint}.pem" ]]; then
      verbose "Found specified CA with fingerprint '%s'" "$fingerprint"
    else
      info "Found unspecified or misnamed CA with fingerprint '%s'. Removing." "$fingerprint"
      rm -fv "$cert_path" | pipe_warning
    fi
  done < <(find "$certs_path" -type f -print0)
  # Update specified CAs
  for fingerprint in "${FINGERPRINT[@]}"; do
    "$pkgroot/bin/pkidb-ca" --dest "${certs_path}/${fingerprint}.pem" "$fingerprint" || { ret=$?; continue; }
    capaths+=("${certs_path}/${fingerprint}.pem")
    ssh_pubkey=$(ssh-keygen -i -m PKCS8 -f <(get_pubkey <"${certs_path}/${fingerprint}.pem")) || { ret=$?; continue; }
    key_lines+=("$ssh_pubkey")
  done
  umask 133
  printf "%s\n" "${key_lines[@]}" >"$ca_keys_path"
  "$pkgroot/bin/pkidb-client-krl" --dest "$krl_path" "$KRLNAME" "${capaths[@]}" || ret=$?
  info "The client CA certs and the krl have been updated"

  # shellcheck disable=2154
  if [[ $__step_root_fp != "\$STEP_ROOT_FP" ]]; then
    export STEP_ROOT_FP=$__step_root_fp
  elif [[ -z $STEP_ROOT_FP ]]; then
    fatal "\$STEP_ROOT_FP is not defined"
  fi
  export STEP_URL
  STEP_URL=$(LOGLEVEL=warning "$pkgroot/bin/pkidb-ca" "$STEP_ROOT_FP" | get_subject_field "2.5.4.87" url)

  local algo ssh_host_key renewed=false
  # shellcheck disable=2154
  for algo in "${__key_algo[@]}"; do
    ssh_host_key="ssh_host_${algo}_key"
    if (cd /etc/ssh && step ssh needs-renewal --expires-in "$__expiry_threshhold" "${ssh_host_key}-cert.pub" 2>&1) | pipe_verbose; then
      if (cd /etc/ssh && step ssh renew --force "${ssh_host_key}-cert.pub" "$ssh_host_key"); then
        renewed=true
      else
        ret=$?
      fi
    fi
  done
  if $renewed; then
    info "The host keys have been renewed"
  else
    info "The host keys do not require renewal"
  fi

  systemctl reload ssh
  return $ret
}

pkidb_sshd "$@"
